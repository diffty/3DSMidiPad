#ifndef TS_COMMON_TYPES_HPP
#define TS_COMMON_TYPES_HPP

#include "iwidget.hpp"

class MainCharacter;


enum E_ORIENTATION {
	E_ORIENTATION_N,
	E_ORIENTATION_NO,
	E_ORIENTATION_O,
	E_ORIENTATION_SO,
	E_ORIENTATION_S,
	E_ORIENTATION_SE,
	E_ORIENTATION_E,
	E_ORIENTATION_NE,
	E_ORIENTATION_UNKNOWN,
};

enum FSM_MAINCHAR_STATE {
	E_MAINCHAR_STATE_IDLE,
	E_MAINCHAR_STATE_SEEKING,
	E_MAINCHAR_STATE_APPEALED,
	E_MAINCHAR_STATE_WALKING,
	E_MAINCHAR_STATE_ARRIVED,
	E_MAINCHAR_STATE_OCCUPIED_OBJ,
	E_MAINCHAR_STATE_OCCUPIED_CRIT,
	E_MAINCHAR_STATE_OCCUPIED_WORKGUY,
	E_MAINCHAR_STATE_WIN_APPEALED,
	E_MAINCHAR_STATE_WIN_WALKING_TO_CHAR,
	E_MAINCHAR_STATE_WIN_ARRIVED_AT_CHAR,
	E_MAINCHAR_STATE_WIN_WALKING_TO_EXIT,
	E_MAINCHAR_STATE_WIN_VANISH,
	E_MAINCHAR_STATE_WIN_OUT
};

enum FSM_WINCHAR_STATE {
	E_WINCHAR_STATE_APPEAR,
	E_WINCHAR_STATE_WALKING,
	E_WINCHAR_STATE_WAIT_MAIN_CHAR,
	E_WINCHAR_STATE_WAIT,
	E_WINCHAR_STATE_WALKBACK,
	E_WINCHAR_STATE_DISAPPEAR,
	E_WINCHAR_STATE_FINISH
};

typedef struct eventTimer_t {
	float currTime;
	float limit;
} eventTimer_t;

typedef struct eventDist_t {
	float currDist;
	float limit;
} eventDist_t;

typedef struct eventMainCharState_t {
	MainCharacter* pTargetChar;
	FSM_MAINCHAR_STATE eState;
} eventMainCharState_t;


#endif
